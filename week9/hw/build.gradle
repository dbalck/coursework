/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'dbalck' at '7/18/17 10:25 AM' with Gradle 2.10
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html


 */

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.2.0'
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"

    }
}

ext {
    consumerKey = 'wREDwYZcJMIsfVMhKcqePB209'
    consumerSecret = '36C1LnOz6vAu7EHSQrJwzylQUt7q9Y7yTJvraMDX2mNF3cR3Ah'
    
    accessToken = '843973725955526656-I5aZZ148OTw4togV1eKr2yFCCHHRxpU'
    accessTokenSecret = 'xsUfFlOJIHWiKqXE1CzRsZmbPvDdcdCMvLEf83tCyZSko'
}


// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.hidetake.ssh' 
apply plugin: "com.github.johnrengelman.shadow"



// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
  sshAntTask
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    compile 'org.apache.spark:spark-core_2.11:2.1.0'
    compile 'org.apache.spark:spark-streaming_2.11:2.1.0'
    compile 'org.apache.bahir:spark-streaming-twitter_2.11:2.1.1'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:3.8.2'
}

remotes {
  sparkmaster {
    host = '169.54.25.214'
    user = 'root'
    //password = 'SLtHgx2P'
    agent = true

    identity = file("${System.properties['user.home']}/.ssh/sl")
  }
}

task deploy {
  doLast {
    ssh.run {
      session(remotes.sparkmaster) {
        put from: 'build/libs/hw-all.jar', into: '/root/'
        execute ("/usr/local/spark/bin/spark-submit --class 'PopHash' --master spark://spark1:7077 hw-all.jar $consumerKey $consumerSecret $accessToken $accessTokenSecret 6", logging: 'stdout')
      }
    }
  }
}
